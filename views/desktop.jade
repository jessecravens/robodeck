// Create any number of elements with class slide within the container
section.slide
	h1 robodeck
	h2 Interactive Demo - Connecting and GeoLocation
	ol 
		li Connect to http://robodeck.herokuapp.com
		li Your Browser will detect Web Socket Support
		li If necessary, your browser will fallback to Comet techniques
		li Once connection is established, your browser will pass GeoLocation to server
		li Server pushes GeoLocation data to all clients

section.slide#remote
	h1 HTML5 Rocks
	h2 Interactive Demo - Remote Control Pub/Sub
	ol 
		li We connect to the same application with a Sencha 2.O HTML5 Mobile Web app
		li We advance the deck by publishing NEXT or PREV command messages to the server
		li All connected clients are subscribing to the commands
		li Client JavaScript then controls the deck

section.slide#thanks
	h1 Thank You!
	ol Interactive Demo - the end.

	
// deck.navigation snippet
a.deck-prev-link(href='#', title='Previous') &#8592
a.deck-next-link(href='#', title='Next') &#8594

// deck.goto snippet
form.goto-form(action='.', method='get')
	label(for='goto-slide') Go to slide:
	input#goto-slide(type='text', name='slidenum', list='goto-datalist')
	datalist#goto-datalist
	input(type='submit', value='Go')

// deck.hash snippet
a.deck-permalink(href='.', title='Permalink to this slide') #

footer
div#clients
	p#viewers
	div#locationsWrapper
		p#locations
	p#tweets
// Other extension HTML snippets go here, at the bottom of the deck container.
// Update these paths to point to the correct files.

script(src='../jquery-1.7.min.js')
script(src='../deck.js/core/deck.core.js')
script(src='../deck.js/extensions/hash/deck.hash.js')
script(src='../deck.js/extensions/menu/deck.menu.js')
script(src='../deck.js/extensions/goto/deck.goto.js')
script(src='../deck.js/extensions/status/deck.status.js')
script(src='../deck.js/extensions/navigation/deck.navigation.js')
script(src='../deck.js/extensions/scale/deck.scale.js')

// Add any other extension JS files here
// Initialize the deck. You can put this in an external file if desired.

script
	$(function() {$.deck('.slide');});

script
	var socket = io.connect();

	// Im wondering if connection is deprecated? Yup, its connect.

	socket.on('connect', function (data) {
		console.log("client connect EVENT FIRED");
		console.log('geo')
		function success(position) {
			console.log(position);
			socket.emit('geo', { long: position.coords.longitude, lat: position.coords.latitude });
		}

		function error(msg) {
			console.log(msg);
		}

		if (navigator.geolocation) {
			console.log('supported')
			navigator.geolocation.getCurrentPosition(success, error);
		} else {
			error('not supported');
		};
	});

	socket.on('message', function (data) {
		console.dir(data);
		console.dir(JSON.parse(data));
		var json = JSON.parse(data);		

		if (json['state'] > -1) {
			console.log('state: ' + json.state);
			console.log("STATE MESSAGE");
			// fire an event
			$.deck('go', json.state);
		}
		if (json.cmd) {
			console.log('cmd: ' + json.cmd);
			console.log("CMD MESSAGE");
			// call deck.js api
			$.deck(json.cmd)
		}
		else if (json.clients) {
			console.log('clients: ' + json.clients);
			console.log("CLIENT NUMBER MESSAGE");		
			// update the DOM
			$('#viewers').text('viewers:' + json.clients);
		}
		else if (json.loc) {
			console.log('loc: ' + json.loc);
			console.log("CLIENT loc MESSAGE");	
			// update the DOM
			$('#locations').append('location: ' + json.loc +'</br>');
		}
		else if (json.fn) {
			console.log('callback fn: ' + json.fn);
			console.log("FIRING SERVER DEFINED CALLBACK");
			json.fn();
		}

		// $('#tweets').text('tweets:' + json.clients);

	});